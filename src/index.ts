/**
 * Schemats takes sql database schema and creates corresponding typescript definitions
 * Created by xiamx on 2016-08-10.
 */
// tslint:disable

import { generateEnumType, generateTableInterface, normalizeName, toCamelCase } from './typescript'
import { getDatabase, Database } from './schema'
import Options, { OptionValues } from './options'
import { processString, Options as ITFOptions } from 'typescript-formatter'

const pkgVersion = require('../package.json').version

function buildHeader(db: Database, tables: string[], schema: string | null, options: OptionValues): string {
  let commands = ['pg-to-ts', 'generate', '-c', db.connectionString.replace(/:\/\/.*@/, '://username:password@')]
  if (options.camelCase) commands.push('-C')
  if (tables.length > 0) {
    tables.forEach((t: string) => {
      commands.push('-t', t)
    })
  }
  if (schema) {
    commands.push('-s', schema)
  }

  return `
        /**
         * AUTO-GENERATED FILE - DO NOT EDIT!
         *
         * This file was automatically generated by pg-to-ts v.${pkgVersion}
         * $ ${commands.join(' ')}
         *
         */

    `
}

export async function typescriptOfTable(db: Database | string,
  table: string,
  schema: string,
  tableToKeys: {[tableName: string]: string},
  options = new Options()) {
  if (typeof db === 'string') {
    db = getDatabase(db)
  }

  let interfaces = ''
  let tableTypes = await db.getTableTypes(table, schema, tableToKeys, options)
  interfaces += generateTableInterface(table, tableTypes, options)
  return interfaces
}

export async function typescriptOfSchema(db: Database | string,
  tables: string[] = [],
  excludedTables: string[] = [],
  schema: string | null = null,
  options: OptionValues = {}): Promise<string> {
  if (typeof db === 'string') {
    db = getDatabase(db)
  }

  if (!schema) {
    schema = db.getDefaultSchema()
  }

  if (tables.length === 0) {
    tables = (await db.getSchemaTables(schema))
      .filter(t => excludedTables.indexOf(t) == -1);
  }

  const optionsObject = new Options(options)

  const enumTypes = generateEnumType(await db.getEnumTypes(schema), optionsObject)
  const tableToKeys = await db.getPrimaryKeys(schema);
  const interfacePromises = tables.map((table) => typescriptOfTable(db, table, schema as string, tableToKeys, optionsObject))
  const interfaces = await Promise.all(interfacePromises)
    .then(tsOfTable => tsOfTable.join(''))

  const tableNames = tables.map(t => normalizeName(optionsObject.transformTypeName(t), optionsObject));
  const typeMaps = tableNames.map(tableName => `
    ${tableName}: {
      select: ${toCamelCase(tableName)};
      input: ${toCamelCase(tableName)}Input;
    };`).join('');
  const tableMap = tableNames.join(',\n  ');

  let output = '/* tslint:disable */\n\n'
  if (optionsObject.options.writeHeader) {
    output += buildHeader(db, tables, schema, options)
  }

  output += `
  export type Json =
  | string
  | number
  | boolean
  | null
  | { [property: string]: Json }
  | Json[];
    `;

  output += enumTypes
  output += interfaces
  output += `

  export interface TableTypes {${typeMaps}
  }

  export const tables = {
    ${tableMap},
  }
  `;

  const formatterOption: ITFOptions = {
    replace: false,
    verify: false,
    tsconfig: true,
    tslint: true,
    editorconfig: true,
    tsfmt: true,
    vscode: false,
    tsconfigFile: null,
    tslintFile: null,
    vscodeFile: null,
    tsfmtFile: null,
  }

  const processedResult = await processString('schema.ts', output, formatterOption)
  return processedResult.dest.replace(/    /g, '  ');
}

export { Database, getDatabase } from './schema'
export { Options, OptionValues }
